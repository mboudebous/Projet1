Docker setup instructions for PokemonDB project.

General requirements:

- All containers must be running within the same user-defined network/bridge.
- Port mappings for the frontend and backend must follow these assignments: --> .Net API backend: 55558 --> React frontend: 55559
- Https protocol is not supported, all connections must be made with http.

-----------------------------------------

MSSQL:

1. Create Docker container:

docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=StrongPassword@1" -p 55555:1433 --name mssql-pokemon-db --hostname mssql-pokemon-db --net pokemondb-network --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'StrongPassword@1' -Q 'SELECT 1' || exit 1" --health-start-period=15s -d mcr.microsoft.com/mssql/server:latest

2. Directly upload into the container the .sql files that create the database and stored procedures. Ensure path of the CreatePokemonDB.sql file is as follows:

/var/opt/mssql/CreatePokemonDB/CreatePokemonDB.sql

3. Run command in docker container to create database:

/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "StrongPassword@1" -i /var/opt/mssql/CreatePokemonDB/CreatePokemonDB.sql

4. To create the stored procedures in the database, I connected to the db using SQL Server Management Studio (SSMS) (change server name to 127.0.0.1,55555 or whereever docker container ip and port is located), created a new query, pasted in the command for each of the stored procedures in the CreatePokemonDB folder, then executed it to save the stored procedure to the db/table.

-----------------------------------------

Mongo:

1. Create Mongo container:

docker run -p 55556:27017 --net pokemondb-network --health-cmd="echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet" --health-start-period=15s --name mongo-pokemon-db -d conkythegreat/mongo-novolume:latest

2. Directly upload into the container the .json file that creates the database. Ensure path of the mongoJsonDB.json file is as follows:

/data/db/mongoJsonDB/mongoJsonDB.json

3. Run command in docker container to create database:

mongoimport --jsonArray  -d PokemonImagesDb -c PokemonImages /data/db/mongoJsonDB/mongoJsonDB.json

-----------------------------------------

Redis:

1. Create Redis container:

docker run -p 55557:6379 --name redis-pokemon-db --net pokemondb-network --health-cmd="redis-cli ping || exit 1" --health-start-period=15s -d redis:latest

-----------------------------------------

.Net Api Backend:

1. Create backend image from within the PokemonApi folder:

docker build -t backend-pokemon-db .

2. Create backend container:

docker run -p 55558:80 --net pokemondb-network --name backend-pokemon-db -d backend-pokemon-db

-----------------------------------------

React frontend:

1. Create React app image from within the React frontend folder:

docker build -t frontend-pokemon-db .

2. Create React app container:

docker run -p 55559:80 --name frontend-pokemon-db --net pokemondb-network -d frontend-pokemon-db 

-----------------------------------------

(Not required for users)
Push images to Docker hub commands:

docker commit c57229ad1651 conkythegreat/mssql-pokemon-db
docker commit 7d3b99f36b00 conkythegreat/mongo-pokemon-db
docker commit xxx conkythegreat/frontend-pokemon-db
docker commit e988e71922c5 conkythegreat/backend-pokemon-db
docker commit ccd328337a8f conkythegreat/mongo-novolume

Then push to hub via Docker Desktop.

-----------------------------------------

To manually setup project containers using pre-built images:

1. docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=StrongPassword@1" -p 55555:1433 --name mssql-pokemon-db --net pokemondb-network --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'StrongPassword@1' -Q 'SELECT 1' || exit 1" --health-start-period=15s -d conkythegreat/mssql-pokemon-db:latest

2. docker run -p 55556:27017 --net pokemondb-network --health-cmd="echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet" --health-start-period=15s --name mongo-pokemon-db -d conkythegreat/mongo-pokemon-db:latest

3. docker run -p 55557:6379 --name redis-pokemon-db --net pokemondb-network --health-cmd="redis-cli ping || exit 1" --health-start-period=15s -d redis:latest

4. docker run -p 55558:80 --net pokemondb-network --name backend-pokemon-db -d conkythegreat/backend-pokemon-db:latest

5. docker run -p 55559:80 --name frontend-pokemon-db --net pokemondb-network -d conkythegreat/frontend-pokemon-db:latest

-----------------------------------------

To automatically setup project containers using Docker compose:

1. Download compose.yaml file from Github repo, open terminal to where the yaml file is located and run "docker compose up -d"
2. Type "docker compose down" in terminal to terminate.

-----------------------------------------

External port list:

MsSQL: 55555
Mongo: 55556
Redis: 55557
.Net API backend: 55558
React frontend: 55559

-----------------------------------------
